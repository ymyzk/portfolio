name: Build

on: [push]

permissions:
  contents: read
  id-token: write
  packages: write

jobs:
  build-app:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci
      - run: npm run build
      - run: npm run export
      - run: npm test
      - if: ${{ matrix.node-version == '16.x' }}
        uses: actions/upload-artifact@v2
        with:
          name: portfolio
          path: out

  test-dockerfile:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run hadolint
        run: docker run --rm -i hadolint/hadolint:latest < Dockerfile

  build-docker-images:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs:
      - build-app
      - test-dockerfile
    steps:
      - uses: actions/checkout@v2
      - run: docker version
      - run: docker build -t portfolio .
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push to GitHub Container Registry
        run: |
          docker tag portfolio ghcr.io/ymyzk/portfolio:$GITHUB_SHA
          docker tag portfolio ghcr.io/ymyzk/portfolio:latest
          docker push ghcr.io/ymyzk/portfolio:$GITHUB_SHA
          docker push ghcr.io/ymyzk/portfolio:latest

  upload-to-s3:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs:
      - build-app
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: portfolio
          path: out
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
      - name: Upload files to S3
        # TODO Tune cache duration
        run: aws s3 sync ./out ${{ secrets.AWS_S3_BUCKET }} --cache-control "public, max-age=3600"
